package io.github.jootoi.veikkaus.api.gui;

/* 
 * Copyright (c) 2017, Joonas Toimela
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * ^^ Vain siltä varalta että joskus lisään mahdollisuuden myös pelata käyttäen Veikkauksen APIa
 * ja ohjelma ei pelaakaan mitä käyttäjä haluaa tai luuli haluavansa. Vaikka ei Amerikassa ollakkaan.
 */
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.DelayQueue;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTable;

/*
Tämä ohjelma esittää Veikkauksen avoimesta rajapinnasta saatavaa dataa graaffisessa, ihmiselle soveltuvassa muodossa.

Ohjelman riippuvuudet (dependencies):
Gson: https://github.com/google/gson	
Gsonia käytetään APIsta saatavien JSON muotoisen datan deserialisointiin.
OkHttp3: https://github.com/square/okhttp
OkHttp3ea käytetään http pyyntöjen lähettämiseen
Okio: https://github.com/square/okio
OkHttp vaatii Okion toimiakseen.

Kaikki käytetyt kirjastot on julkaistu Apache 2.0 lisenssin alaisina.
http://www.apache.org/licenses/LICENSE-2.0

Ohjelman tarkoituksena on toimia laajenevana harjoitustyönä JSON APIsta, http yhteyksistä, graaffisista käyttöliittymistä, 
säikeistyksestä ja yleisesti Java ohjelmoinnista.
Samalla ohjelma voi toimia esimerkkinä jos haluaa toteuttaa Veikkauksen API sivulla (https://github.com/VeikkausOy/sport-games-robot) 
kuvatun kaltaisen pelirobotin Javalla.

@Author Joonas Toimela <Toimela.Joonas.J@student.uta.fi>
*/


/*
Luokka on vastuussa graaffisen käyttöliittymän piirtämisestä sekä työskentelevän säikeen (mainloop) käynnistämisestä. 
Luokka sisältää main metodin lisäksi graaffisen käyttöliittymän piirtämisessä tarvitavia metodeja.
Työsäikeen tarvitsema tieto (mm. päivityskäskyt) välitetään käyttäen prioriteetti jonoa (java.util.concurrent.DelayQueue).
Samaa jonoa käytetään työsäikeessä ajastettujen päivitysten tekemiseen.
Takaisinpäin työsäikeeltä tietoa välitetään kutsumalla tämän luokan metodeja.
*/
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane7 = new javax.swing.JTabbedPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        events = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        warnings = new javax.swing.JTextArea();
        Settings = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        totoRestart = new javax.swing.JButton();
        totoStop = new javax.swing.JButton();
        totoFullUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tapahtuman tunniste (EventID)", "Maa", "Paikkakunta", "Tapahtuma alkaa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jTabbedPane2.addTab("Todays Events", jScrollPane3);

        jTabbedPane3.addTab("Tapahtumat", jTabbedPane2);

        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(321, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(236, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Ladataan...", jPanel3);

        jTabbedPane3.addTab("Kertoimet", jTabbedPane4);

        jTabbedPane7.addTab("Toto", jTabbedPane3);

        events.setEditable(false);
        events.setColumns(20);
        events.setLineWrap(true);
        events.setRows(5);
        jScrollPane2.setViewportView(events);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Loki", jPanel1);

        warnings.setEditable(false);
        warnings.setColumns(20);
        warnings.setLineWrap(true);
        warnings.setRows(5);
        jScrollPane1.setViewportView(warnings);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Varoitukset", jPanel5);

        jButton1.setText("Onko mainloop elossa?");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("En tiedä");

        totoRestart.setText("Käynnistä");
        totoRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totoRestartActionPerformed(evt);
            }
        });

        totoStop.setText("Sammuta");
        totoStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totoStopActionPerformed(evt);
            }
        });

        totoFullUpdate.setText("Päivitä kaikki");
        totoFullUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totoFullUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SettingsLayout = new javax.swing.GroupLayout(Settings);
        Settings.setLayout(SettingsLayout);
        SettingsLayout.setHorizontalGroup(
            SettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SettingsLayout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addComponent(totoStop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totoRestart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totoFullUpdate)
                .addGap(0, 353, Short.MAX_VALUE))
        );
        SettingsLayout.setVerticalGroup(
            SettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SettingsLayout.createSequentialGroup()
                .addGroup(SettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totoRestart)
                    .addComponent(totoStop)
                    .addComponent(totoFullUpdate))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Kontrollit", Settings);

        jTabbedPane7.addTab("Debug", jTabbedPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane7)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane7)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void resultButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        MyButton source = (MyButton)evt.getSource();
        int raceID = source.getId();
		if(raceID!=-1 && RaceTabforRaceId.get(raceID).indexOfTab("Tulokset")==-1) {
			Races upd = new Races(raceID);
			upd.updateTime = System.currentTimeMillis();
			updateQue.add(upd);
		}
    }
private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        MyButton source = (MyButton)evt.getSource();
        Pools u = (Pools)source.getRelatedObject();
        if(u != null) {
           u.updateTime = System.currentTimeMillis();
           updateQue.put(u);
        }
    }
	
	//Välittää työsäikeelle käskyn hakea tarkemmat tiedot yksittäisestä kisaajasta.
    private void jTablePressEvent(java.awt.event.MouseEvent e) {
        JTable source = (JTable)e.getSource();
        int id = IdbyOddsTable.get(source);
        int row = source.rowAtPoint(e.getPoint());
		RunnerInfo u = new RunnerInfo(row,id);
		updateQue.put(u);
    }
    
    
    //Testaa onko työsäie kaatunut, pääasiassa debugausta varten. Myös restart nappi olis kiva.
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(main.isAlive()) {
			jLabel4.setText("Joo on elossa");
        }
        else {
			jLabel4.setText("Ei, se kuoli");
        }                                       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void totoStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totoStopActionPerformed
        Thread t = new Thread(new Runnable() { public void run() { destroyThread(main);}});
        t.start();
    }//GEN-LAST:event_totoStopActionPerformed

    private void totoRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totoRestartActionPerformed
        main = new mainloop(this, updateQue,true);
        main.setName("mainloop");
        main.start();
    }//GEN-LAST:event_totoRestartActionPerformed

    private void totoFullUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totoFullUpdateActionPerformed
       Eventcollection u = new Eventcollection();
       u.updateTime = System.currentTimeMillis();
       updateQue.add(u);
    }//GEN-LAST:event_totoFullUpdateActionPerformed
	

    //Lyhyt main metodi kaiken muun käynnistämistä varten.
    public static void main(String[] args) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        GUI gui = new GUI();
        updateQue = new DelayQueue<Updatable>();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                gui.setVisible(true);
                
            }
        });
        main = new mainloop(gui, updateQue,false);
        main.setName("mainloop");
        main.start();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Settings;
    private javax.swing.JTextArea events;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton totoFullUpdate;
    private javax.swing.JButton totoRestart;
    private javax.swing.JButton totoStop;
    private javax.swing.JTextArea warnings;
    // End of variables declaration//GEN-END:variables

	//Sama jatkuu...
    private static Thread main;
    private static DelayQueue<Updatable> updateQue;
    private ConcurrentSkipListMap<Integer, JTable> oddsTablebyId = new ConcurrentSkipListMap<>();
    private HashMap<JTable, Integer> IdbyOddsTable = new HashMap<>();
    private ConcurrentSkipListMap<Integer, JPanel> oddsRightPanelbyId = new ConcurrentSkipListMap<>();
    private HashMap<Integer,Races> RaceforPoolid = new HashMap<>();
	private HashMap<Integer, JTabbedPane> RaceTabforRaceId = new HashMap<>(); //Tarvitaan lopputulosten lisäämiseen
    private final DateTimeFormatter timeOnly = DateTimeFormatter.ofPattern("HH:mm:ss");
    //Ja nyt on oikeasti muuttujat määritelty
	
	
	/*
	Kirjoittaa events/tapahtumat nimisellä välilehdellä olevaan tekstilaatikkoon.
	Jokaisen rivin alkuun lisätään järjestelmän kellonaika
	Käytetään lähinnä työsäikeen toiminnasta raportointiin.
	*/
    public void writetoEvents(String str) {
        String timeString = LocalDateTime.now().format(timeOnly);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                events.append(timeString + ": " + str + "\n");
            }
        });
    }

	/*
	Kirjoittaa warnings/varoitukset nimisellä välilehdellä olevaan tekstilaatikkoon.
	Jokaisen rivin alkuun lisätään järjestelmän kellonaika
	Käytetään lähinnä työsäikeen virheistä raportointiin.
	*/
    public void writetoWarnings(String str) {
        String timeString = LocalDateTime.now().format(timeOnly);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                warnings.append(timeString + ": " + str + "\n");
            }
        });
    }

	//Tarkoitettu työsäikeen sammuttamiseen. Älä kutsu EDTstä.
    private void destroyThread(Thread t) {
        int max = 3;
        if (t != null) {
            String name = t.getName();
            writetoEvents("Closing thread: " + name);
            t.destroy();
            int i = 0;
            do {
                Updatable u = new Updatable();
                u.updateTime = System.currentTimeMillis();
                updateQue.add(u);
                try {
                    t.join(2*1000);
                }
                catch (InterruptedException ex) {
                    writetoWarnings("Thread (" + name + ") was Interrupted before safe closing");
                }
                i++;
            }
            while(t.isAlive() && i<max);
            if(!t.isAlive()) {
                writetoEvents("Thread (" + name + ") succesfully closed");
            }
            else {
                writetoWarnings("Failed to close thread: " + name);
            }
        }
    }

	//Päivittää päivän tapahtumat omaan taulukoonsa
    public void updateEventsTable(ArrayList<Events> data) {
        Object[][] table = new Object[data.size()][4];
        int i = 0;
        while (i < data.size()) {
            Events cur = data.get(i);
            table[i][0] = cur.cardId;
            table[i][1] = cur.country;
            table[i][2] = cur.trackName;
            LocalDateTime date = LocalDateTime.ofInstant(Instant.ofEpochMilli(cur.firstRaceStart), ZoneId.systemDefault());
            table[i][3] = date.toString();
            i++;
        }
        int columns = jTable1.getColumnCount();
        String[] names = new String[columns];
        int j = 0;
        while (j < columns) {
            names[j] = jTable1.getColumnName(j);
            j++;
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                jTable1.setModel(new javax.swing.table.DefaultTableModel(table, names){
					@Override
					public boolean isCellEditable(int row, int column) {
						return false;
					}
				});
            }
        });
    }

	//Lisää tapahtuma sivulle oman välilehden joka tapahtumalle ja talukoi joitain tietoja lähdöistä.
    public void racestoEvents(ArrayList<Events> data) {
        String[] commonLabels = new String[]{"Lähtö #", "Matka", "Lähtö aika", "Monte?"};
        int i = 1;
        while (i < jTabbedPane2.getTabCount()) {
            jTabbedPane2.remove(i);
            i++;
        }
        for (Events e : data) {
            if (e.getRaces() != null) {
                String tabName = e.trackName;
                javax.swing.JScrollPane tmp = new javax.swing.JScrollPane();
                Object[][] table = new Object[e.getRaces().collection.size()][4];
                int j = 0;
                for (Races r : e.getRaces().collection) {
                    if (r != null) {
                        table[j][0] = r.number;
                        table[j][1] = r.distance;
                        LocalDateTime date = LocalDateTime.ofInstant(Instant.ofEpochMilli(r.startTime), ZoneId.systemDefault());
                        table[j][2] = date;
                        table[j][3] = r.monte;
                        j++;
                    }
                    javax.swing.JTable tmp2 = new javax.swing.JTable();
                    tmp2.setModel(new javax.swing.table.DefaultTableModel(table, commonLabels) {
                        Class[] types = new Class[]{
                            java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
                        };
                        boolean[] canEdit = new boolean[]{
                            false, false, false, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types[columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    });
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            jTabbedPane2.addTab(tabName, tmp);
                            tmp.setViewportView(tmp2);
                        }
                    });
                }
            }
        }
    }
	/*
	Metodia käytetään kaikkien päivän tapahtumien kaikkien lähtöjen kaikkien pelikohteiden päivittämiseen.
	Metodi luo jokaiselle tapahtumalle oman välilehden, jonka alle luodaan joka lähdölle oma välilehti, jonka 
	alle taas luodaan välilehti jokaiselle kyseisen lähdön pelikohteelle. Lisäksi metodi tyhjentää ja luo uudestaan
	kaikki kyseisiin välilehtiin liittyvät assosiatiiviset tietorakenteet.
	*/
    public void fillPoolsTab(ArrayList<Events> data) {
        jTabbedPane4.removeAll();
        oddsTablebyId.clear();
        oddsRightPanelbyId.clear();
        IdbyOddsTable.clear();
        RaceforPoolid.clear();
		RaceTabforRaceId.clear();
		//Uloin luuppi luo tapahtumien välilehdet
        for (Events e : data) {
            if (e != null) {
                javax.swing.JTabbedPane tmp1 = new javax.swing.JTabbedPane();
                String tabname1 = e.trackName;
                if (e.getRaces() != null) {
					//Sitten luodaan lähtöjen välilehdet
                    for (Races r : e.getRaces().collection) {

                        javax.swing.JTabbedPane tmp2 = new javax.swing.JTabbedPane();
                        String tabname2 = "Lähtö " + Integer.toString(r.number);
						RaceTabforRaceId.put(r.raceId, tmp2);
						//Ja lopuksi pelikohteiden välilehdet ja taulukot.
                        for (Pools p : r.getPools()) {
                            RaceforPoolid.put(p.poolId, r);
                            if (p.getPool() != null) {
                                //Luodaan taulukon viereen tuleva paneeli.
                                javax.swing.JPanel tmpContainer = new javax.swing.JPanel();
                                tmpContainer.setLayout(new BorderLayout());
                                MyButton tmpButton = new MyButton("Päivitä");
								MyButton resultButton = new MyButton("Hae tulokset, jos mahdollista");
                                tmpButton.setRelatedObject(p);
                                resultButton.setId(r.raceId);
                                tmpButton.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        jButton2ActionPerformed(evt);
                                    }
                                });
								resultButton.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        resultButtonActionPerformed(evt);
                                    }
                                });
								
                                
                                javax.swing.JPanel labelContainer = new javax.swing.JPanel();
                                labelContainer.setLayout(new BoxLayout(labelContainer, BoxLayout.Y_AXIS));
                                JLabel updateTimeLabel = new JLabel("Päivitystä yritetty viimeksi: " + LocalDateTime.now().format(timeOnly).toString());
                                LocalDateTime date = LocalDateTime.ofInstant(Instant.ofEpochMilli(p.getPool().updated), ZoneId.systemDefault());
                                JLabel dataTimestamp = new JLabel("Data päivittynyt viimeksi: " + date.format(timeOnly).toString());
                                date = LocalDateTime.ofInstant(Instant.ofEpochMilli(r.startTime), ZoneId.systemDefault());
                                JLabel startTime = new JLabel("Lähtö lähtee: " + date.format(timeOnly).toString());
                                JLabel PoolLabel = new JLabel("Kohteen tunniste(PoolID): " + p.poolId);
                                labelContainer.add(updateTimeLabel);
                                labelContainer.add(dataTimestamp);
                                labelContainer.add(startTime);
                                labelContainer.add(PoolLabel);
                                labelContainer.add(tmpButton);
								labelContainer.add(resultButton);
                                //paaneli luotu
                                //Lisätään paneeli mappiin myöhempää käyttöä varten, avaimeksi pelikohteen id-luku.
                                oddsRightPanelbyId.put(p.poolId, labelContainer);
                                tmpContainer.add(labelContainer,BorderLayout.EAST);
                                
								//Aloitetaan taulukoiden luonti.
                                javax.swing.JScrollPane tmp4 = new javax.swing.JScrollPane();
                                tmpContainer.add(tmp4);
                                String tabname3 = p.poolName;
                                int total = p.netSales;
                                javax.swing.JTable tmp3 = new javax.swing.JTable();
                                tmp4.setName(Integer.toString(p.poolId));
                                //Taulukon muoto riippuu pelikohteen tyypistä.
                                switch (tabname3) {
                                    case "Voittaja": {
                                        Object[][] table = new Object[p.getPool().odds.size()][3];
                                        String[] labels = new String[]{"Numero", "Kerroin", "Peliprosentti"};
                                        int i = 0;
                                        for (Odds o : p.getPool().odds) {
                                            table[i][0] = o.runnerNumber;
                                            table[i][1] = (double) (o.probable) / 100;
                                            if (total != 0) {
                                                table[i][2] = (o.amount * 100 / total);
                                            }
                                            else {
                                                table[i][2] = 0;
                                            }
                                            i++;
                                        }
                                        tmp3.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                                            Class[] types = new Class[]{
                                                java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class
                                            };
                                            boolean[] canEdit = new boolean[]{
                                                false, false, false
                                            };
                                            @Override
                                            public Class getColumnClass(int columnIndex) {
                                                return types[columnIndex];
                                            }

                                            @Override
                                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                                return canEdit[columnIndex];
                                            }
                                        });
                                        /*Taulukon listener joka hakee lisätietoja hevosesta clickattaessa taulukkoon.
                                         Käytetään (toistaiseksi) vain voittaja ja sija pelien yhteydessä.
                                        */
                                        tmp3.addMouseListener(new MouseAdapter() {
                                            public void mousePressed(java.awt.event.MouseEvent e) {
                                                jTablePressEvent(e);
                                            }
                                        });
                                        break;
                                    }
                                    case "Sija": {
                                        Object[][] table = new Object[p.getPool().odds.size()][4];
                                        String[] labels = new String[]{"Numero", "Min.", "Max.", "Peliprosentti"};
                                        int i = 0;
                                        for (Odds o : p.getPool().odds) {
                                            table[i][0] = o.runnerNumber;
                                            table[i][1] = (double) (o.minProbable) / 100;
                                            table[i][2] = (double) (o.maxProbable) / 100;
                                            if (total != 0) {
                                                table[i][3] = (o.amount * 100 / total);
                                            }
                                            else {
                                                table[i][3] = 0;
                                            }
                                            i++;
                                        }
                                        tmp3.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                                            Class[] types = new Class[]{
                                                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class
                                            };
                                            boolean[] canEdit = new boolean[]{
                                                false, false, false, false
                                            };

                                            @Override
                                            public Class getColumnClass(int columnIndex) {
                                                return types[columnIndex];
                                            }

                                            @Override
                                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                                return canEdit[columnIndex];
                                            }
                                        });
                                        tmp3.addMouseListener(new MouseAdapter() {
                                            public void mousePressed(java.awt.event.MouseEvent e) {
                                                jTablePressEvent(e);
                                            }
                                        });
                                        break;
                                    }
                                    case "Toto5":
                                    case "Toto54":
                                    case "Toto75":
                                    case "Toto76":
                                    case "Toto8":
                                    case "Toto87":
                                    case "Toto86":
                                    case "Toto65":
                                    case "Toto6":
                                    case "Toto64":
                                    case "Toto4": {
                                        int amount = p.getPool().odds.size();
                                        int lahtoja = p.getPool().odds.get(amount - 1).legNumber;
                                        Object[][] table = new Object[16][lahtoja + 1];
                                        String[] labels = new String[lahtoja + 1];
                                        labels[0] = "#";
                                        int j = 1;
                                        while (j < lahtoja + 1) {
                                            labels[j] = "Lähtö " + Integer.toString(j);
                                            j++;
                                        }
                                        int i = 0;
                                        for (Odds o : p.getPool().odds) {
                                            table[o.runnerNumber - 1][0] = o.runnerNumber;
                                            table[o.runnerNumber - 1][o.legNumber] = o.percentage / 100;
                                            i++;
                                        }
                                        tmp3.setModel(new javax.swing.table.DefaultTableModel(table, labels) {

                                            @Override
                                            public Class getColumnClass(int columnIndex) {
                                                return java.lang.Integer.class;
                                            }

                                            @Override
                                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                                return false;
                                            }
                                        });
                                        break;
                                    }
                                    case "Eksakta":
                                    case "Päivän Duo":
                                    case "Kaksari": {
                                        Object[][] table = new Object[p.getPool().odds.size()][3];
                                        String[] labels = new String[]{"Juoksija 1", "Juoksija 2", "Kerroin"};
                                        int i = 0;
                                        for (Odds o : p.getPool().odds) {
                                            table[i][0] = o.runnerNumber1;
                                            table[i][1] = o.runnerNumber2;
                                            table[i][2] = (double) (o.probable) / 100;
                                            i++;
                                        }
                                        tmp3.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                                            Class[] types = new Class[]{
                                                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
                                            };
                                            boolean[] canEdit = new boolean[]{
                                                false, false, false
                                            };

                                            @Override
                                            public Class getColumnClass(int columnIndex) {
                                                return types[columnIndex];
                                            }

                                            @Override
                                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                                return canEdit[columnIndex];
                                            }
                                        });
                                        break;
                                    }
                                    case "Troikka": {
                                        Object[][] table = new Object[p.getPool().odds.size()][4];
                                        String[] labels = new String[]{"Juoksija 1", "Juoksija 2", "Juoksija 3", "Kerroin"};
                                        int i = 0;
                                        for (Odds o : p.getPool().odds) {
                                            table[i][0] = o.runnerNumber1;
                                            table[i][1] = o.runnerNumber2;
                                            table[i][2] = o.runnerNumber3;
                                            table[i][3] = (double) (o.probable) / 100;
                                            i++;
                                        }
                                        tmp3.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                                            Class[] types = new Class[]{
                                                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
                                            };
                                            boolean[] canEdit = new boolean[]{
                                                false, false, false, false
                                            };

                                            @Override
                                            public Class getColumnClass(int columnIndex) {
                                                return types[columnIndex];
                                            }

                                            @Override
                                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                                return canEdit[columnIndex];
                                            }
                                        });
                                        break;
                                    }
                                    case "Sijapari": {
                                        Object[][] table = new Object[p.getPool().odds.size()][4];
                                        String[] labels = new String[]{"Juoksija 1", "Juoksija 2", "Min.", "Max."};
                                        int i = 0;
                                        for (Odds o : p.getPool().odds) {
                                            table[i][0] = o.runnerNumber1;
                                            table[i][1] = o.runnerNumber2;
                                            table[i][2] = (double) o.minProbable / 100;
                                            table[i][3] = (double) o.maxProbable / 100;
                                            i++;
                                        }
                                        tmp3.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                                            Class[] types = new Class[]{
                                                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
                                            };
                                            boolean[] canEdit = new boolean[]{
                                                false, false, false, false
                                            };

                                            @Override
                                            public Class getColumnClass(int columnIndex) {
                                                return types[columnIndex];
                                            }

                                            @Override
                                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                                return canEdit[columnIndex];
                                            }
                                        });
                                        break;
                                    }
                                    default:
                                        writetoWarnings("Pelikohteen nimen tunnistamisessa epäonnistuttiin: " + tabname3);
                                        break;
                                }

                                
                                //Myös talukoiden löytäminen kohteen id:n perusteella on kätevää (ja toisinpäin)
								//kahteen suuntaan assosiatiivinen kartta olisi käynyt myös.
                                oddsTablebyId.put(p.poolId, tmp3);
                                IdbyOddsTable.put(tmp3,p.poolId);

                                java.awt.EventQueue.invokeLater(new Runnable() {
                                    public void run() {
                                        tmp4.setViewportView(tmp3);
                                        tmp2.addTab(tabname3,tmpContainer);
                                    }
                                });
                            }
                        }

                        java.awt.EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                tmp1.addTab(tabname2, tmp2);
                            }
                        });
                    }
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            jTabbedPane4.addTab(tabname1, tmp1);
                        }
                    });
                }
            }
        }
    }

	//Sama kuin edellinen, mutta tämä metodi päivittää vain yhden pelikohteen. Metodi myös olettaa,
	//että päivitettävä sivu on jo olemassa.
    public boolean updateOddsbyId(int id, Pools data) {
        JTable Jtable = oddsTablebyId.get(id);
        JPanel labelPanel = oddsRightPanelbyId.get(id);
        Races race = RaceforPoolid.get(id);
        if(Jtable != null && labelPanel != null && race != null) {
            String name = data.poolName;
            int total = data.netSales;
            Container container = labelPanel.getParent();
            JPanel labelPanelnew = new JPanel();
            labelPanelnew.setLayout(new BoxLayout(labelPanelnew, BoxLayout.Y_AXIS));
            MyButton resultButton = new MyButton("Hae tulokset, jos mahdollista");
            MyButton tmpButton = new MyButton("Päivitä");
            tmpButton.setRelatedObject(data);
            resultButton.setId(race.raceId);
            tmpButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                    }
                });
            resultButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    resultButtonActionPerformed(evt);
                    }
                });
            
            JLabel updateTimeLabel = new JLabel("Päivitystä yritetty viimeksi: " + LocalDateTime.now().format(timeOnly));
            LocalDateTime date = LocalDateTime.ofInstant(Instant.ofEpochMilli(data.getPool().updated), ZoneId.systemDefault());
            JLabel dataTimestamp = new JLabel("Data päivittynyt viimeksi: " + date.format(timeOnly));
            date = LocalDateTime.ofInstant(Instant.ofEpochMilli(race.startTime), ZoneId.systemDefault());
            JLabel startTime = new JLabel("Lähtö lähtee: " + date.format(timeOnly));
            JLabel PoolLabel = new JLabel("Kohteen tunniste(PoolID): " + data.poolId);
            labelPanelnew.add(updateTimeLabel);
            labelPanelnew.add(dataTimestamp);
            labelPanelnew.add(startTime);
            labelPanelnew.add(PoolLabel);
            labelPanelnew.add(tmpButton);
            labelPanelnew.add(resultButton);
            
            oddsRightPanelbyId.replace(id, labelPanelnew);
            container.remove(labelPanel);
            container.add(labelPanelnew, BorderLayout.EAST);
            container.revalidate();
            container.repaint();
            
            
            switch (name) {
                case "Voittaja": {
                    Object[][] table = new Object[data.getPool().odds.size()][3];
                    String[] labels = new String[]{"Numero", "Kerroin", "Peliprosentti"};
                    int i = 0;
                    for (Odds o : data.getPool().odds) {
                        table[i][0] = o.runnerNumber;
                        table[i][1] = (double) (o.probable) / 100;
                        if (total != 0) {
                            table[i][2] = (o.amount * 100 / total);
                        }
                        else {
                            table[i][2] = 0;
                        }
                        i++;
                    }
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                        Jtable.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                        Class[] types = new Class[]{
                            java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class
                        };
                        boolean[] canEdit = new boolean[]{
                            false, false, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types[columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit[columnIndex];
                        }
                        });
                        }
                    });
                    break;
                }
                case "Sija": {
                    Object[][] table = new Object[data.getPool().odds.size()][4];
                    String[] labels = new String[]{"Numero", "Min.", "Max.", "Peliprosentti"};
                    int i = 0;
                    for (Odds o : data.getPool().odds) {
                        table[i][0] = o.runnerNumber;
                        table[i][1] = (double) (o.minProbable) / 100;
                        table[i][2] = (double) (o.maxProbable) / 100;
                        if (total != 0) {
                            table[i][3] = (o.amount * 100 / total);
                        }
                        else {
                            table[i][3] = 0;
                        }
                        i++;
                    }
                    java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                    Jtable.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                        Class[] types = new Class[]{
                            java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class
                        };
                        boolean[] canEdit = new boolean[]{
                            false, false, false, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types[columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    });
                    }
                    });
                    break;
                }
                case "Toto5":
                case "Toto54":
                case "Toto75":
                case "Toto76":
                case "Toto8":
                case "Toto87":
                case "Toto86":
                case "Toto65":
                case "Toto6":
                case "Toto64":
                case "Toto4": {
                    int amount = data.getPool().odds.size();
                    int lahtoja = data.getPool().odds.get(amount - 1).legNumber;
                    Object[][] table = new Object[16][lahtoja + 1];
                    String[] labels = new String[lahtoja + 1];
                    labels[0] = "#";
                    int j = 1;
                    while (j < lahtoja + 1) {
                        labels[j] = "Lähtö " + Integer.toString(j);
                        j++;
                    }
                    int i = 0;
                    for (Odds o : data.getPool().odds) {
                        table[o.runnerNumber - 1][0] = o.runnerNumber;
                        table[o.runnerNumber - 1][o.legNumber] = o.percentage / 100;
                        i++;
                    }
                    java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                    Jtable.setModel(new javax.swing.table.DefaultTableModel(table, labels) {

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return java.lang.Integer.class;
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return false;
                        }
                    });
                    }
                    });
                    break;
                }
                case "Eksakta":
                case "Päivän Duo":
                case "Kaksari": {
                    Object[][] table = new Object[data.getPool().odds.size()][3];
                    String[] labels = new String[]{"Juoksija 1", "Juoksija 2", "Kerroin"};
                    int i = 0;
                    for (Odds o : data.getPool().odds) {
                        table[i][0] = o.runnerNumber1;
                        table[i][1] = o.runnerNumber2;
                        table[i][2] = (double) (o.probable) / 100;
                        i++;
                    }
                    java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                    Jtable.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                        Class[] types = new Class[]{
                            java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
                        };
                        boolean[] canEdit = new boolean[]{
                            false, false, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types[columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    });
                    }
                    });
                    break;
                }
                case "Troikka": {
                    Object[][] table = new Object[data.getPool().odds.size()][4];
                    String[] labels = new String[]{"Juoksija 1", "Juoksija 2", "Juoksija 3", "Kerroin"};
                    int i = 0;
                    for (Odds o : data.getPool().odds) {
                        table[i][0] = o.runnerNumber1;
                        table[i][1] = o.runnerNumber2;
                        table[i][2] = o.runnerNumber3;
                        table[i][3] = (double) (o.probable) / 100;
                        i++;
                    }
                    java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                    Jtable.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                        Class[] types = new Class[]{
                            java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
                        };
                        boolean[] canEdit = new boolean[]{
                            false, false, false, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types[columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    });
                    }
                    });
                    break;
                }
                case "Sijapari": {
                    Object[][] table = new Object[data.getPool().odds.size()][4];
                    String[] labels = new String[]{"Juoksija 1", "Juoksija 2", "Min.", "Max."};
                    int i = 0;
                    for (Odds o : data.getPool().odds) {
                        table[i][0] = o.runnerNumber1;
                        table[i][1] = o.runnerNumber2;
                        table[i][2] = (double) o.minProbable / 100;
                        table[i][3] = (double) o.maxProbable / 100;
                        i++;
                    }
                    java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                    Jtable.setModel(new javax.swing.table.DefaultTableModel(table, labels) {
                        Class[] types = new Class[]{
                            java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
                        };
                        boolean[] canEdit = new boolean[]{
                            false, false, false, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types[columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    });
                    }
                    });
                    break;
                }
                default:
                    writetoWarnings("Pelikohteen nimen tunnistamisessa epäonnistuttiin: " + name);
                    break;
            }
            oddsTablebyId.replace(id,Jtable);
            IdbyOddsTable.replace(Jtable, id);
            return true;
        }
        else return false;
    }
	//Näyttä lisätietoikkunan ykisttäisestä kisaajasta.
	void showInfoDialog(RunnerInfo data) {
		String[] messages = new String[12];
			messages[0]="Hevosen nimi: " + data.horseName;
			messages[1]="Lähtö numero: " + data.startNumber;
			messages[2]="Etukengät: " + data.frontShoes;
			messages[3]="Takakengät: " + data.rearShoes;
			messages[4]="Ikä: " + data.horseAge;
			messages[5]="Isä: " + data.sire;
			messages[6]="Emä: " + data.dam;
			messages[7]="Sukupuoli: " + data.gender;
			messages[8]="";
			messages[9]="Ohjastajan nimi: " + data.driverName;
			messages[10]="Valmentajan nimi: " + data.coachName;
			messages[11]="Omistajan nimi: " + data.ownerName;

		javax.swing.JFrame thisFrame = this;
		java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
				JOptionPane.showMessageDialog(thisFrame, messages, "Info", JOptionPane.INFORMATION_MESSAGE);
			}});
		
	}
    /*Lisää tulokset välilehden pelattavien peikohteiden välilehtien perään ja näyttää sivulla tulokset kyseistä lähdöstä */
	void showResults(int raceId, Tulokset t) {
        if(t.toteResult != null) {
            JTabbedPane correctTab = RaceTabforRaceId.get(raceId);

            JLabel header = new JLabel("Kokonaistulokset:");
            JLabel tulojrj = new JLabel("Tulojärjestys: " + t.toteResult);
            String poisj = "";
            for(int n:t.scratched) {
                poisj += " " + n;
            }
            JLabel poisjaaneet = new JLabel("Poisjääneet:" + poisj);
            JPanel tuloksetPanel = new JPanel();
            tuloksetPanel.setLayout(new BoxLayout(tuloksetPanel, BoxLayout.PAGE_AXIS));
            tuloksetPanel.add(header);
            tuloksetPanel.add(tulojrj);
            tuloksetPanel.add(poisjaaneet);

            HashMap<String,JPanel> panels = new HashMap<>();
            for(Results res:t.results) {
                switch (res.poolType) {
                    case "VOI": {
                        JPanel p;
                        if(panels.get(res.poolType) == null) {
                            p = new JPanel();
                            p.setLayout(new BoxLayout(p, BoxLayout.PAGE_AXIS));
                            panels.put(res.poolType, p);
                        }
                        else {
                            p = panels.get(res.poolType);
                        }
                        JLabel h = new JLabel(res.poolName + " peli");
                        JLabel w = new JLabel("Lähtönumero: " + res.combination);
                        JLabel prob = new JLabel("Kerroin: " + (double)res.probable/100);
                        JLabel n = new JLabel("Hevosen nimi: " + res.horseName);
                        JLabel driverN = new JLabel("Ohjastajan nimi: " + res.driverFirstName + " " + res.driverLastName);
                        p.add(h);p.add(w);p.add(prob);p.add(n);p.add(driverN);
                        break;
                    }
                    case "SIJ":{
                        JPanel p;
                        if(panels.get(res.poolType) == null) {
                            p = new JPanel();
                            p.setLayout(new BoxLayout(p, BoxLayout.PAGE_AXIS));
                            panels.put(res.poolType, p);
                            JLabel h = new JLabel(res.poolName + " peli");
                            p.add(h);
                        }
                        else {
                            p = panels.get(res.poolType);
                        }
                        JLabel h = new JLabel(" ");
                        JLabel w = new JLabel("Lähtönumero: " + res.combination);
                        JLabel prob = new JLabel("Kerroin: " + (double)res.probable/100);
                        JLabel n = new JLabel("Hevosen nimi: " + res.horseName);
                        JLabel driverN = new JLabel("Ohjastajan nimi: " + res.driverFirstName + " " + res.driverLastName);
                        p.add(h);p.add(w);p.add(prob);p.add(n);p.add(driverN);
                        break;
                    }
                    case "TRO":
                    case "DUO":
                    case "KAK":{
                        JPanel p;
                        if(panels.get(res.poolType) == null) {
                            p = new JPanel();
                            p.setLayout(new BoxLayout(p, BoxLayout.PAGE_AXIS));
                            panels.put(res.poolType, p);
                        }
                        else {
                            p = panels.get(res.poolType);
                        }
                        JLabel h = new JLabel(res.poolName + " peli");
                        JLabel w = new JLabel("Oikearivi: " + res.combination);
                        JLabel prob = new JLabel("Kerroin: " + (double)res.probable/100);
                        p.add(h);p.add(w);p.add(prob);
                        break;
                    }
                }

            }
            JPanel ResultsPanel = new JPanel(new GridLayout(0, panels.size()+1));
            ResultsPanel.add(tuloksetPanel);
            for(JPanel jp:panels.values()) {
                ResultsPanel.add(jp);
            }


            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    correctTab.addTab("Tulokset", ResultsPanel);
                }
            });

        }
    }
    //Näyttää Toto/Kertoimet välilehdellä latauspalkin.
    public void setTotoLoadProgress(int max) {
        jTabbedPane4.removeAll();
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    jTabbedPane4.add("Ladataan...",jPanel3);
                    jProgressBar1.setValue(0);
                    jProgressBar1.setMaximum(max);
                }
            });
    }
    //Muuttaa Toto/Kertoimet välilehden latauspalkkia.
    public void changeTotoLoadProgress(int val) {
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    jProgressBar1.setValue(val);
                }
            });
    }
}
