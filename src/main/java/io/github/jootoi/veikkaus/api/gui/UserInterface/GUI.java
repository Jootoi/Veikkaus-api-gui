package io.github.jootoi.veikkaus.api.gui.UserInterface;

/* 
 * Copyright (c) 2017, Joonas Toimela
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * ^^ Vain siltä varalta että joskus lisään mahdollisuuden myös pelata käyttäen Veikkauksen APIa
 * ja ohjelma ei pelaakaan mitä käyttäjä haluaa tai luuli haluavansa. Vaikka ei Amerikassa ollakkaan.
 */
import io.github.jootoi.veikkaus.api.gui.Toto.TotoWorker;
import io.github.jootoi.veikkaus.api.gui.Toto.Updatable;
import java.awt.Component;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.concurrent.DelayQueue;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
Tämä ohjelma esittää Veikkauksen avoimesta rajapinnasta saatavaa dataa graaffisessa, ihmiselle soveltuvassa muodossa.

Ohjelman riippuvuudet (dependencies):
Gson: https://github.com/google/gson    
Gsonia käytetään APIsta saatavien JSON muotoisen datan deserialisointiin.
OkHttp3: https://github.com/square/okhttp
OkHttp3ea käytetään http pyyntöjen lähettämiseen
Okio: https://github.com/square/okio
OkHttp vaatii Okion toimiakseen.

Kaikki käytetyt kirjastot on julkaistu Apache 2.0 lisenssin alaisina.
http://www.apache.org/licenses/LICENSE-2.0

Ohjelman tarkoituksena on toimia laajenevana harjoitustyönä JSON APIsta, http yhteyksistä, graaffisista käyttöliittymistä, 
säikeistyksestä ja yleisesti Java ohjelmoinnista.
Samalla ohjelma voi toimia esimerkkinä jos haluaa toteuttaa Veikkauksen API sivulla (https://github.com/VeikkausOy/sport-games-robot) 
kuvatun kaltaisen pelirobotin Javalla.

@Author Joonas Toimela <Toimela.Joonas.J@student.uta.fi>
*/


/*
Luokka on vastuussa graaffisen käyttöliittymän piirtämisestä sekä työskentelevän säikeen (TotoWorker) käynnistämisestä. 
Luokka sisältää main metodin lisäksi graaffisen käyttöliittymän piirtämisessä tarvitavia metodeja.
Työsäikeen tarvitsema tieto (mm. päivityskäskyt) välitetään käyttäen prioriteetti jonoa (java.util.concurrent.DelayQueue).
Samaa jonoa käytetään työsäikeessä ajastettujen päivitysten tekemiseen.
Takaisinpäin työsäikeeltä tietoa välitetään kutsumalla tämän luokan metodeja.
*/
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        //add all static JTabbedPane components to the map, and their keys to separate Set,
        containers.put(0, rootTabbedPane);containers.put(1, totoTabbedPane);containers.put(2, debugTabbedPane);
        containers.put(3, eventsTabbedPane);containers.put(4, oddsTabbedPane);
        staticContainerIds.add(0);staticContainerIds.add(1);staticContainerIds.add(2);staticContainerIds.add(3);
        staticContainerIds.add(4);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootTabbedPane = new javax.swing.JTabbedPane();
        totoTabbedPane = new javax.swing.JTabbedPane();
        eventsTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        oddsTabbedPane = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        debugTabbedPane = new javax.swing.JTabbedPane();
        logPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        events = new javax.swing.JTextArea();
        warningsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        warnings = new javax.swing.JTextArea();
        settingsPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        totoRestart = new javax.swing.JButton();
        totoStop = new javax.swing.JButton();
        totoFullUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tapahtuman tunniste (EventID)", "Maa", "Paikkakunta", "Tapahtuma alkaa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        eventsTabbedPane.addTab("Todays Events", jScrollPane3);

        totoTabbedPane.addTab("Tapahtumat", eventsTabbedPane);

        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(321, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(236, Short.MAX_VALUE))
        );

        oddsTabbedPane.addTab("Ladataan...", jPanel3);

        totoTabbedPane.addTab("Kertoimet", oddsTabbedPane);

        rootTabbedPane.addTab("Toto", totoTabbedPane);

        events.setEditable(false);
        events.setColumns(20);
        events.setLineWrap(true);
        events.setRows(5);
        jScrollPane2.setViewportView(events);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
                .addContainerGap())
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                .addContainerGap())
        );

        debugTabbedPane.addTab("Loki", logPanel);

        warnings.setEditable(false);
        warnings.setColumns(20);
        warnings.setLineWrap(true);
        warnings.setRows(5);
        jScrollPane1.setViewportView(warnings);

        javax.swing.GroupLayout warningsPanelLayout = new javax.swing.GroupLayout(warningsPanel);
        warningsPanel.setLayout(warningsPanelLayout);
        warningsPanelLayout.setHorizontalGroup(
            warningsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warningsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
                .addContainerGap())
        );
        warningsPanelLayout.setVerticalGroup(
            warningsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(warningsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                .addContainerGap())
        );

        debugTabbedPane.addTab("Varoitukset", warningsPanel);

        jButton1.setText("Onko mainloop elossa?");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("En tiedä");

        totoRestart.setText("Käynnistä");
        totoRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totoRestartActionPerformed(evt);
            }
        });

        totoStop.setText("Sammuta");
        totoStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totoStopActionPerformed(evt);
            }
        });

        totoFullUpdate.setText("Päivitä kaikki");
        totoFullUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totoFullUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addComponent(totoStop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totoRestart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totoFullUpdate)
                .addGap(0, 353, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totoRestart)
                    .addComponent(totoStop)
                    .addComponent(totoFullUpdate))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        debugTabbedPane.addTab("Kontrollit", settingsPanel);

        rootTabbedPane.addTab("Debug", debugTabbedPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rootTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(rootTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

public void resultButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        MyButton source = (MyButton)evt.getSource();
        int raceID = source.getId();
        if(raceID!=-1 && ((JTabbedPane)containers.get(raceID)).indexOfTab("Tulokset")==-1) {
            HashMap<String,Object> params = new HashMap<>();
            params.put("raceID", raceID);
            updateQue.add(new Updatable(Updatable.UpdateType.RACE, params, System.currentTimeMillis()));
        }
    }
public void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        MyButton source = (MyButton)evt.getSource();
        int poolID = source.getId();
        HashMap<String,Object> params = new HashMap<>();
        params.put("poolID", poolID);
        updateQue.put(new Updatable(Updatable.UpdateType.ODDS, params, System.currentTimeMillis()));
    }
    
    //Välittää työsäikeelle käskyn hakea tarkemmat tiedot yksittäisestä kisaajasta.
    public void jTablePressEvent(java.awt.event.MouseEvent e) {
        JTable source = (JTable)e.getSource();
        //JTable->JViewport->JScrollPane->OddsTableComponent
        int id = ((OddsTableComponent)source.getParent().getParent().getParent()).getId();
        int row = source.rowAtPoint(e.getPoint());
        HashMap<String,Object> params = new HashMap<>();
        params.put("raceID", id);
        params.put("number", row);
        updateQue.put(new Updatable(Updatable.UpdateType.INFO, params, System.currentTimeMillis()));
    }
    
    
    //Testaa onko työsäie kaatunut, pääasiassa debugausta varten. Myös restart nappi olis kiva.
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(main.isAlive()) {
            jLabel4.setText("Joo on elossa");
        }
        else {
            jLabel4.setText("Ei, se kuoli");
        }                                       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void totoStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totoStopActionPerformed
        Thread t = new Thread(new Runnable() { public void run() { destroyThread(main);}});
        t.start();
    }//GEN-LAST:event_totoStopActionPerformed

    private void totoRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totoRestartActionPerformed
        main = new TotoWorker(this, updateQue,true);
        main.setName("mainloop");
        main.start();
    }//GEN-LAST:event_totoRestartActionPerformed

    private void totoFullUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totoFullUpdateActionPerformed
    updateQue.add(new Updatable(Updatable.UpdateType.DAILY, System.currentTimeMillis()));
    }//GEN-LAST:event_totoFullUpdateActionPerformed
    

    //Lyhyt main metodi kaiken muun käynnistämistä varten.
    public static void main(String[] args) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        GUI gui = new GUI();
        updateQue = new DelayQueue<Updatable>();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                gui.setVisible(true);
                
            }
        });
        main = new TotoWorker(gui, updateQue,false);
        main.setName("mainloop");
        main.start();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane debugTabbedPane;
    private javax.swing.JTextArea events;
    private javax.swing.JTabbedPane eventsTabbedPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel logPanel;
    private javax.swing.JTabbedPane oddsTabbedPane;
    private javax.swing.JTabbedPane rootTabbedPane;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JButton totoFullUpdate;
    private javax.swing.JButton totoRestart;
    private javax.swing.JButton totoStop;
    private javax.swing.JTabbedPane totoTabbedPane;
    private javax.swing.JTextArea warnings;
    private javax.swing.JPanel warningsPanel;
    // End of variables declaration//GEN-END:variables

    //Sama jatkuu...
    private static Thread main;
    private static DelayQueue<Updatable> updateQue;
    private final DateTimeFormatter timeOnly = DateTimeFormatter.ofPattern("HH:mm:ss");
    private final HashMap<Integer, java.awt.Container> containers = new HashMap<>();
    private final LinkedHashSet<Integer> staticContainerIds = new LinkedHashSet<>();
    //Ja nyt on oikeasti muuttujat määritelty
    
    
    /*
    Kirjoittaa events/tapahtumat nimisellä välilehdellä olevaan tekstilaatikkoon.
    Jokaisen rivin alkuun lisätään järjestelmän kellonaika
    Käytetään lähinnä työsäikeen toiminnasta raportointiin.
    */
    public void writetoEvents(String str) {
        String timeString = LocalDateTime.now().format(timeOnly);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                events.append(timeString + ": " + str + "\n");
            }
        });
    }

    /*
    Kirjoittaa warnings/varoitukset nimisellä välilehdellä olevaan tekstilaatikkoon.
    Jokaisen rivin alkuun lisätään järjestelmän kellonaika
    Käytetään lähinnä työsäikeen virheistä raportointiin.
    */
    public void writetoWarnings(String str) {
        String timeString = LocalDateTime.now().format(timeOnly);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                warnings.append(timeString + ": " + str + "\n");
            }
        });
    }

    //Tarkoitettu työsäikeen sammuttamiseen. Älä kutsu EDTstä.
    private void destroyThread(Thread t) {
        int max = 3;
        if (t != null) {
            String name = t.getName();
            writetoEvents("Closing thread: " + name);
            t.destroy();
            int i = 0;
            do {
                Updatable u = new Updatable();
                u.setUpdateTime(System.currentTimeMillis());
                updateQue.add(u);
                try {
                    t.join(2*1000);
                }
                catch (InterruptedException ex) {
                    writetoWarnings("Thread (" + name + ") was Interrupted before safe closing");
                }
                i++;
            }
            while(t.isAlive() && i<max);
            if(!t.isAlive()) {
                writetoEvents("Thread (" + name + ") succesfully closed");
            }
            else {
                writetoWarnings("Failed to close thread: " + name);
            }
        }
    }

 
    //Näyttä lisätietoikkunan ykisttäisestä kisaajasta.
    public void showInfoDialog(String[] messages) {
        javax.swing.JFrame thisFrame = this;
        java.awt.EventQueue.invokeLater(() -> {
            JOptionPane.showMessageDialog(thisFrame, messages, "Info", JOptionPane.INFORMATION_MESSAGE);
        });
        
    }
   
    //Näyttää Toto/Kertoimet välilehdellä latauspalkin.
    public void setTotoLoadProgress(int max) {
        oddsTabbedPane.removeAll();
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    oddsTabbedPane.add("Ladataan...",jPanel3);
                    jProgressBar1.setValue(0);
                    jProgressBar1.setMaximum(max);
                }
            });
    }
    //Muuttaa Toto/Kertoimet välilehden latauspalkkia.
    public void changeTotoLoadProgress(int val) {
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    jProgressBar1.setValue(val);
                }
            });
    }
    
    //Luo uuden MyTab:n (JTabbedPane) ja liittää sen osaksi käyttöliittymää
    public JTabbedPane createTabbedPane(String label,int id, int parentID) {
        MyTab JTP = new MyTab(parentID,id);
        containers.put(id, JTP);
        Container parent = containers.get(parentID);
        if(parent != null && parent instanceof JTabbedPane){
            if(parent instanceof MyTab) {
                ((MyTab)parent).children.add(id);
            }
            JTabbedPane parentJTP = (JTabbedPane)parent;
            java.awt.EventQueue.invokeLater(() -> {
                parentJTP.addTab(label,JTP);
            });
            return JTP;
        }
        else return null;
    }
    
    //Parametrit: raceID, välilehden nimi, taulukoitu data, taulukon otsakkeet, datan päivittymisaika, pelikohteen id, lisää taulukkoon kuuntelija (jTablePressEvent)
    public void addOddsContent(int parentID, String label, Object[][] data, Object[] labels, long dataTimestamp, int poolID, boolean addTableListener) {
        MyButton resultButton = new MyButton("Hae tulokset, jos mahdollista");
            MyButton updateButton = new MyButton("Päivitä");
            updateButton.setId(poolID);
            resultButton.setId(parentID);
            updateButton.addActionListener(this::jButton2ActionPerformed);
            resultButton.addActionListener(this::resultButtonActionPerformed);
        Component[] components = new Component[] {
            new JLabel("Päivitystä yritetty viimeksi: " + LocalDateTime.now().format(timeOnly)),
            new JLabel("Data päivittynyt viimeksi: " + LocalDateTime.ofInstant(Instant.ofEpochMilli(dataTimestamp), ZoneId.systemDefault()).format(timeOnly)),
            new JLabel("Kohteen tunniste(PoolID): " + poolID),
            updateButton,
            resultButton
        };
        OddsTableComponent OTC = new OddsTableComponent(new InfoPanel(components), data, labels);
        OTC.setId(poolID);
        MyTab tab = (MyTab)containers.get(parentID);
        Container old = containers.put(poolID, OTC);
        if(addTableListener) {
            OTC.getDatatable().addMouseListener(new MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent e) {
                    jTablePressEvent(e);
                }
            });
        }
        //replaces if poolID already existed
        if(old == null) {
            java.awt.EventQueue.invokeLater(() -> {
                tab.add(label, OTC, poolID);
            });
        }
        else {
            int position = tab.indexOfComponent(old);
            java.awt.EventQueue.invokeLater(() -> {
                tab.add(label, OTC, poolID, position);
                tab.remove(old);
            });
        }
    }
    
    public void replaceOddsContent(int poolID, String label, Object[][] data, Object[] labels, long dataTimestamp, boolean addTableListener) {
        
        Container otc = containers.get(poolID);
        MyTab parentTab = (MyTab)otc.getParent();
        addOddsContent(parentTab.id, label, data, labels, dataTimestamp, poolID, addTableListener);
    }
    
    public void addResultsTab(ArrayList<ArrayList<String>> data, int raceID) {
        JPanel resultPanel = new JPanel(new GridLayout(1, 0));
        for(ArrayList<String> lines:data) {
            if(lines.isEmpty()) {continue;}
            JPanel subPanel = new JPanel();
            subPanel.setLayout(new BoxLayout(subPanel, BoxLayout.PAGE_AXIS));
            for(String line:lines) {
                subPanel.add(new JLabel(line));
            }
            resultPanel.add(subPanel);
        }
        JTabbedPane tab = (JTabbedPane)containers.get(raceID);
        javax.swing.JScrollPane ScrollPaneWrapper = new javax.swing.JScrollPane(resultPanel);
        java.awt.EventQueue.invokeLater(() -> {
            tab.addTab("Tulokset",ScrollPaneWrapper);
        });
    }
    
    public void addEventInfo(ArrayList<Object[][]> dataTables, ArrayList<Object[]> dataLabels, ArrayList<String> tabNames) {
        eventsTabbedPane.removeAll();
        for(int i = 0;i<tabNames.size();i++) {
            JTable table = new JTable(new DefaultTableModel(dataTables.get(i), dataLabels.get(i)) {
                @Override
                public boolean isCellEditable(int row, int column){ return false;}
            });
            javax.swing.JScrollPane tableView = new javax.swing.JScrollPane(table);
            String tabName = tabNames.get(i);
            java.awt.EventQueue.invokeLater(() -> {
                eventsTabbedPane.add(tabName,tableView);
            });
        }
    }
    public void resetTotoUI() {
        oddsTabbedPane.removeAll();
        containers.keySet().retainAll(staticContainerIds);
    }
}
